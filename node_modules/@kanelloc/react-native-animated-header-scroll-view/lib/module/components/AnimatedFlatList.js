function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
import React, { forwardRef } from 'react';
import { Animated } from 'react-native';
import AnimatedNavbar from './AnimatedNavbar';
import { HEADER_HEIGHT, IMG_HEADER_HEIGHT } from '../constants';
import { useAnimateScrollView } from '../hooks/useAnimateScrollView';
import { AnimatedHeader } from './AnimatedHeader';
export const AnimatedFlatList = /*#__PURE__*/forwardRef((_ref, ref) => {
  let {
    headerMaxHeight,
    topBarHeight,
    disableScale,
    TopNavBarComponent,
    HeaderNavbarComponent,
    headerImage,
    imageStyle,
    HeaderComponent,
    ...props
  } = _ref;
  const imageHeight = headerMaxHeight || IMG_HEADER_HEIGHT;
  const headerNavHeight = topBarHeight || HEADER_HEIGHT;
  const [scroll, onScroll, scale, translateYDown, translateYUp] = useAnimateScrollView(imageHeight, disableScale);
  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Animated.FlatList, _extends({
    ref: ref
  }, props, {
    onScroll: onScroll,
    ListHeaderComponent: /*#__PURE__*/React.createElement(AnimatedHeader, {
      HeaderComponent: HeaderComponent,
      headerImage: headerImage,
      imageStyle: imageStyle,
      imageHeight: imageHeight,
      translateYDown: translateYDown,
      translateYUp: translateYUp,
      scale: scale
    })
  })), /*#__PURE__*/React.createElement(AnimatedNavbar, {
    headerHeight: headerNavHeight,
    scroll: scroll,
    imageHeight: imageHeight,
    OverflowHeaderComponent: HeaderNavbarComponent,
    TopNavbarComponent: TopNavBarComponent
  }));
});
//# sourceMappingURL=AnimatedFlatList.js.map