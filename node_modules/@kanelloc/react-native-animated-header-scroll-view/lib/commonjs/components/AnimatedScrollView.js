"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.AnimatedScrollView = void 0;
var _reactNative = require("react-native");
var _react = _interopRequireWildcard(require("react"));
var _constants = require("../constants");
var _AnimatedNavbar = _interopRequireDefault(require("./AnimatedNavbar"));
var _useAnimateScrollView = require("../hooks/useAnimateScrollView");
var _AnimatedHeader = require("./AnimatedHeader");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
const AnimatedScrollView = /*#__PURE__*/(0, _react.forwardRef)((_ref, ref) => {
  let {
    TopNavBarComponent,
    HeaderNavbarComponent,
    HeaderComponent,
    headerMaxHeight,
    topBarHeight,
    headerImage,
    disableScale,
    children,
    imageStyle,
    ...props
  } = _ref;
  const imageHeight = headerMaxHeight || _constants.IMG_HEADER_HEIGHT;
  const headerNavHeight = topBarHeight || _constants.HEADER_HEIGHT;
  const [scroll, onScroll, scale, translateYDown, translateYUp] = (0, _useAnimateScrollView.useAnimateScrollView)(imageHeight, disableScale);
  return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_reactNative.Animated.ScrollView, _extends({
    ref: ref,
    onScroll: onScroll,
    scrollEventThrottle: 16
  }, props), /*#__PURE__*/_react.default.createElement(_AnimatedHeader.AnimatedHeader, {
    HeaderComponent: HeaderComponent,
    headerImage: headerImage,
    imageStyle: imageStyle,
    imageHeight: imageHeight,
    translateYDown: translateYDown,
    translateYUp: translateYUp,
    scale: scale
  }), children), /*#__PURE__*/_react.default.createElement(_AnimatedNavbar.default, {
    headerHeight: headerNavHeight,
    scroll: scroll,
    imageHeight: imageHeight,
    OverflowHeaderComponent: HeaderNavbarComponent,
    TopNavbarComponent: TopNavBarComponent
  }));
});
exports.AnimatedScrollView = AnimatedScrollView;
//# sourceMappingURL=AnimatedScrollView.js.map